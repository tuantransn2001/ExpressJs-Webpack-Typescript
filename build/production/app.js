(()=>{"use strict";var e={142:e=>{e.exports=require("dotenv")}},t={};function s(n){var a=t[n];if(void 0!==a)return a.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{const e=require("express");var t=s.n(e);const n=require("http"),a=require("socket.io"),r=require("cors");var o=s.n(r);const i=require("pino");var S=s.n(i);const c=require("dayjs");var _=s.n(c);const E=S()({base:{pid:!1},timestamp:()=>`,"time":"${_()().format()}"`}),T=require("uuid"),d=require("mongoose");var O=s.n(d);const u=new(O().Schema)({id:{type:String},name:{type:String},avatar:{type:String},members:{type:[{id:{type:String},type:{type:String}}]},messages:{type:[{sender:{id:{type:String},type:{type:String}},content:{type:String},createdAt:{type:Date},updatedAt:{type:Date}}]},createdAt:{type:Date},updatedAt:{type:Date}},{timestamps:!0,minimize:!1}),C=O().model("Conversation",u),m=new(O().Schema)({id:{type:String},type:{type:String},firstName:{type:String},lastName:{type:String},email:{type:String},password:{type:String},avatar:{type:String},status:{type:String,default:"offline"},createdAt:{type:Date},updatedAt:{type:Date}},{timestamps:!0,minimize:!1}),p=O().model("User",m);var U,A,D,y;!function(e){e.default_URL="http://localhost:4000",e.access_token=""}(U||(U={})),function(e){e.SUCCESS="Success",e.FAIL="Fail"}(A||(A={})),function(e){e.SUCCESS="Success",e.CONFLICT="Conflict",e.NOT_FOUND="Not Found",e.SERVER_ERROR="Server Error",e.NO_CONTENT="No Content",e.UN_AUTHORIZE="Unauthorize",e.NOT_ACCEPTABLE="Not Acceptable"}(D||(D={})),function(e){e[e.STATUS_CODE_200=200]="STATUS_CODE_200",e[e.STATUS_CODE_201=201]="STATUS_CODE_201",e[e.STATUS_CODE_202=202]="STATUS_CODE_202",e[e.STATUS_CODE_204=204]="STATUS_CODE_204",e[e.STATUS_CODE_401=401]="STATUS_CODE_401",e[e.STATUS_CODE_404=404]="STATUS_CODE_404",e[e.STATUS_CODE_406=406]="STATUS_CODE_406",e[e.STATUS_CODE_409=409]="STATUS_CODE_409",e[e.STATUS_CODE_500=500]="STATUS_CODE_500"}(y||(y={}));const N=class{constructor(){this.data={},this.message="",this.statusCode=y.STATUS_CODE_200}static onSuccess(e,t,s){return{statusCode:e,message:t,data:s}}static onFail(e,t){return{statusCode:e,error:t}}},l="CREATE_ROOM",g="SEND_ROOM_MESSAGE",f="JOIN_ROOM",v="JOINED_ROOM",h="CREATED_AND_JOIN_ROOM",R={UPDATE_SENDER_MESSAGE:"UPDATE_SENDER_MESSAGE",UPDATE_MESSAGE_EXPECT_SENDER:"UPDATE_MESSAGE_EXPECT_SENDER"},b={ONLINE:"ONLINE",OFFLINE:"OFFLINE"},I=class{static async getConversationByMembers(e,t){try{const{members:s}=e.body,n=await C.findOne({members:{$elemMatch:s[0]&&s[1]}});n?t.status(y.STATUS_CODE_200).send(N.onSuccess(y.STATUS_CODE_200,D.SUCCESS,n)):t.status(y.STATUS_CODE_404).send(N.onSuccess(y.STATUS_CODE_404,D.NOT_FOUND,"They haven't been chat before!"))}catch(e){const s=e;t.status(y.STATUS_CODE_500).send(N.onFail(y.STATUS_CODE_500,s))}}static async getContactList(e,t,s){try{const s=e.query.id,n=e.query.type,a=await C.find({members:{$elemMatch:{id:s,type:n}}});t.status(y.STATUS_CODE_200).send(N.onSuccess(y.STATUS_CODE_200,D.SUCCESS,a))}catch(e){s(e)}}},w=(0,e.Router)();w.post("/get-by-members",I.getConversationByMembers).get("/contact",I.getContactList);const M=w,L=require("bcrypt");var F=s.n(L);const P=class{static hash(e,t){return F().hashSync(e,t)}static verify(e,t){return F().compareSync(e,t)}},$=require("jsonwebtoken");var q=s.n($);s(142).config();const k=class{static async login(e,t,s){try{const{email:s,password:n}=e.body,a=await p.findOne({email:s});if(a){const e=a.password;switch(P.verify(n,e)){case!0:{const{id:e,firstName:s,lastName:n}=a,r={id:e,fullName:n+" "+s},o="1d",i=process.env.JWT_TOKEN_SECRET_KEY,S=q().sign(r,i,{expiresIn:o});t.status(y.STATUS_CODE_200).send(N.onSuccess(y.STATUS_CODE_200,D.SUCCESS,{access_token:S,expire:o}));break}case!1:t.status(y.STATUS_CODE_401).send(N.onSuccess(y.STATUS_CODE_401,D.UN_AUTHORIZE,{message:"Client Error & In-valid Token"}))}}else t.status(y.STATUS_CODE_404).send(N.onSuccess(y.STATUS_CODE_404,D.NOT_FOUND,{message:`User with email: ${s} doesn't exist ! Please check it and try again!`}))}catch(e){s(e)}}static async me(e,t,s){try{const{token:s}=e.headers,{id:n}=q().verify(s,process.env.JWT_TOKEN_SECRET_KEY),{id:a,email:r,lastName:o,firstName:i,type:S,status:c}=await p.findOne({id:n});t.status(y.STATUS_CODE_200).send(N.onSuccess(y.STATUS_CODE_200,D.SUCCESS,{id:a,email:r,lastName:o,firstName:i,type:S,status:c}))}catch(e){s(e)}}};s(142).config();const x=async(e,t,s)=>{try{const n=process.env.JWT_TOKEN_SECRET_KEY,{token:a}=e.headers;if(q().verify(a,n))return s();t.status(y.STATUS_CODE_401).send(N.onSuccess(y.STATUS_CODE_401,D.UN_AUTHORIZE,"Client-Error && In-Valid Token"))}catch(e){t.status(y.STATUS_CODE_401).send(N.onSuccess(y.STATUS_CODE_401,D.UN_AUTHORIZE,"Client-Error && In-Valid Token"))}},j=function(e,t,s){const n=e.status||500,a=e.message||"Something in sever went wrong";s.status(n).send({status:n,message:a})},G=(0,e.Router)();G.post("/login",k.login).post("/me",x,k.me);const K=G,B=(0,e.Router)();B.get("/search-by-name",class{static async searchUserByName(e,t,s){try{const{name:s}=e.query,n=await p.find({firstName:{$regex:s,$options:"i"}},{id:1,status:1,firstName:1,lastName:1,type:1,avatar:1});t.status(y.STATUS_CODE_200).send(N.onSuccess(y.STATUS_CODE_200,D.SUCCESS,n))}catch(e){s(e)}}}.searchUserByName,j);const H=B,J=(0,e.Router)();J.use("/conversation",x,M,j),J.use("/auth",K),J.use("/user",H);const V=J;s(142).config();const Z=process.env.LOCAL_HOST,z=process.env.SERVER_HOST,W=process.env.PORT,X=process.env.DB_CONNECT_LINK,Y=process.env.ROOT_URL,Q=process.env.ENVIRONMENT,ee=t()();ee.use(o()()),ee.use(t().json());const te=(0,n.createServer)(ee),se=new a.Server(te,{cors:{origin:"*",credentials:!0}});ee.use(Y,V),O().connect(X).then((()=>{te.listen(W,(async()=>{E.info("Database has been connected"),E.info(`ðŸš€ Server is running on ${Q} ðŸš€ - http://${"PRODUCTION"===Q.toUpperCase()?z:Z}:${W}${Y}`),function({io:e}){E.info("Sockets enabled"),e.on("connection",(t=>{E.info(`User connected ${t.id}`),t.on(b.ONLINE,(e=>{E.info(`${e} is online`),(async()=>{await p.updateOne({id:e},{status:"online"})})()})),t.on(b.OFFLINE,(e=>{E.info(`${e} is offline`),(async()=>{await p.updateOne({id:e},{status:"offline"})})()})),t.on(l,(({members:s,message:n,name:a,avatar:r})=>{(async()=>{const o={id:(0,T.v4)(),avatar:r,name:a,members:s.map((e=>({id:e.id,type:e.type}))),messages:[{sender:{id:n.sender.id,type:n.sender.type},content:n.content,createdAt:new Date,updatedAt:new Date}]},i=await C.create(o);t.join(o.id),e.emit(h,N.onSuccess(y.STATUS_CODE_200,D.SUCCESS,{conversation_id:i.id,name:i.name,members:i.members,messages:i.messages}))})()})),t.on(g,(e=>{const s={...e.message,createdAt:new Date};(async()=>{await C.findOneAndUpdate({id:e.conversationID},{$push:{messages:s}});const n=await C.findOne({id:e.conversationID});t.emit(R.UPDATE_SENDER_MESSAGE,N.onSuccess(y.STATUS_CODE_200,D.SUCCESS,n)),t.to(e.conversationID).emit(R.UPDATE_MESSAGE_EXPECT_SENDER,N.onSuccess(y.STATUS_CODE_200,D.SUCCESS,{conversation_id:n.id,messages:n.messages}))})()})),t.on(f,(e=>{t.join(e),t.emit(v,N.onSuccess(y.STATUS_CODE_200,D.SUCCESS,{roomId:e}))}))}))}({io:se})}))})).catch((e=>{E.error("Can't connect to database"),E.error(`Error: ${e}`),process.exit()}))})()})();